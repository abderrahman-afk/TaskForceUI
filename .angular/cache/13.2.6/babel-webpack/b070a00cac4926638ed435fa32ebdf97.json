{"ast":null,"code":"import { startWith, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/material/form-field\";\nimport * as i3 from \"@angular/material/input\";\nimport * as i4 from \"@angular/material/autocomplete\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/core\";\n\nfunction SelectmembreComponent_mat_optgroup_7_mat_option_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 7);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const name_r4 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", name_r4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", name_r4, \" \");\n  }\n}\n\nfunction SelectmembreComponent_mat_optgroup_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-optgroup\", 5);\n    i0.ɵɵtemplate(1, SelectmembreComponent_mat_optgroup_7_mat_option_1_Template, 2, 2, \"mat-option\", 6);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const group_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"label\", group_r2.letter);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", group_r2.names);\n  }\n}\n\nexport const _filter = (opt, value) => {\n  const filterValue = value.toLowerCase();\n  return opt.filter(item => item.toLowerCase().includes(filterValue));\n};\n/**\r\n * @title Option groups autocomplete\r\n */\n\nexport class SelectmembreComponent {\n  constructor(_formBuilder) {\n    this._formBuilder = _formBuilder;\n    this.stateForm = this._formBuilder.group({\n      stateGroup: ''\n    });\n    this.stateGroups = [{\n      letter: 'A',\n      names: ['Alabama', 'Alaska', 'Arizona', 'Arkansas']\n    }, {\n      letter: 'C',\n      names: ['California', 'Colorado', 'Connecticut']\n    }, {\n      letter: 'D',\n      names: ['Delaware']\n    }, {\n      letter: 'F',\n      names: ['Florida']\n    }, {\n      letter: 'G',\n      names: ['Georgia']\n    }, {\n      letter: 'H',\n      names: ['Hawaii']\n    }, {\n      letter: 'I',\n      names: ['Idaho', 'Illinois', 'Indiana', 'Iowa']\n    }, {\n      letter: 'K',\n      names: ['Kansas', 'Kentucky']\n    }, {\n      letter: 'L',\n      names: ['Louisiana']\n    }, {\n      letter: 'M',\n      names: ['Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana']\n    }, {\n      letter: 'N',\n      names: ['Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'North Dakota']\n    }, {\n      letter: 'O',\n      names: ['Ohio', 'Oklahoma', 'Oregon']\n    }, {\n      letter: 'P',\n      names: ['Pennsylvania']\n    }, {\n      letter: 'R',\n      names: ['Rhode Island']\n    }, {\n      letter: 'S',\n      names: ['South Carolina', 'South Dakota']\n    }, {\n      letter: 'T',\n      names: ['Tennessee', 'Texas']\n    }, {\n      letter: 'U',\n      names: ['Utah']\n    }, {\n      letter: 'V',\n      names: ['Vermont', 'Virginia']\n    }, {\n      letter: 'W',\n      names: ['Washington', 'West Virginia', 'Wisconsin', 'Wyoming']\n    }];\n  }\n\n  ngOnInit() {\n    this.stateGroupOptions = this.stateForm.get('stateGroup').valueChanges.pipe(startWith(''), map(value => this._filterGroup(value)));\n  }\n\n  _filterGroup(value) {\n    if (value) {\n      return this.stateGroups.map(group => ({\n        letter: group.letter,\n        names: _filter(group.names, value)\n      })).filter(group => group.names.length > 0);\n    }\n\n    return this.stateGroups;\n  }\n\n}\n\nSelectmembreComponent.ɵfac = function SelectmembreComponent_Factory(t) {\n  return new (t || SelectmembreComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\n\nSelectmembreComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: SelectmembreComponent,\n  selectors: [[\"app-selectmembre\"]],\n  decls: 9,\n  vars: 5,\n  consts: [[3, \"formGroup\"], [\"appearance\", \"fill\"], [\"type\", \"text\", \"matInput\", \"\", \"formControlName\", \"stateGroup\", \"required\", \"\", 3, \"matAutocomplete\"], [\"autoGroup\", \"matAutocomplete\"], [3, \"label\", 4, \"ngFor\", \"ngForOf\"], [3, \"label\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"]],\n  template: function SelectmembreComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0)(1, \"mat-form-field\", 1)(2, \"mat-label\");\n      i0.ɵɵtext(3, \"States Group\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"input\", 2);\n      i0.ɵɵelementStart(5, \"mat-autocomplete\", null, 3);\n      i0.ɵɵtemplate(7, SelectmembreComponent_mat_optgroup_7_Template, 2, 2, \"mat-optgroup\", 4);\n      i0.ɵɵpipe(8, \"async\");\n      i0.ɵɵelementEnd()()();\n    }\n\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(6);\n\n      i0.ɵɵproperty(\"formGroup\", ctx.stateForm);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"matAutocomplete\", _r0);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(8, 3, ctx.stateGroupOptions));\n    }\n  },\n  directives: [i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i2.MatFormField, i2.MatLabel, i3.MatInput, i1.DefaultValueAccessor, i4.MatAutocompleteTrigger, i1.NgControlStatus, i1.FormControlName, i1.RequiredValidator, i4.MatAutocomplete, i5.NgForOf, i6.MatOptgroup, i6.MatOption],\n  pipes: [i5.AsyncPipe],\n  encapsulation: 2\n});","map":{"version":3,"sources":["C:/Users/Akhalladi/Documents/TaskForce/Front-end/taskforceUI/src/app/components/selectmembre/selectmembre.component.ts"],"names":["startWith","map","i0","i1","i2","i3","i4","i5","i6","SelectmembreComponent_mat_optgroup_7_mat_option_1_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","name_r4","$implicit","ɵɵproperty","ɵɵadvance","ɵɵtextInterpolate1","SelectmembreComponent_mat_optgroup_7_Template","ɵɵtemplate","group_r2","letter","names","_filter","opt","value","filterValue","toLowerCase","filter","item","includes","SelectmembreComponent","constructor","_formBuilder","stateForm","group","stateGroup","stateGroups","ngOnInit","stateGroupOptions","get","valueChanges","pipe","_filterGroup","length","ɵfac","SelectmembreComponent_Factory","t","ɵɵdirectiveInject","FormBuilder","ɵcmp","ɵɵdefineComponent","type","selectors","decls","vars","consts","template","SelectmembreComponent_Template","ɵɵelement","ɵɵpipe","_r0","ɵɵreference","ɵɵpipeBind1","directives","ɵNgNoValidate","NgControlStatusGroup","FormGroupDirective","MatFormField","MatLabel","MatInput","DefaultValueAccessor","MatAutocompleteTrigger","NgControlStatus","FormControlName","RequiredValidator","MatAutocomplete","NgForOf","MatOptgroup","MatOption","pipes","AsyncPipe","encapsulation"],"mappings":"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","sourcesContent":["import { startWith, map } from 'rxjs/operators';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/forms\";\r\nimport * as i2 from \"@angular/material/form-field\";\r\nimport * as i3 from \"@angular/material/input\";\r\nimport * as i4 from \"@angular/material/autocomplete\";\r\nimport * as i5 from \"@angular/common\";\r\nimport * as i6 from \"@angular/material/core\";\r\nfunction SelectmembreComponent_mat_optgroup_7_mat_option_1_Template(rf, ctx) { if (rf & 1) {\r\n    i0.ɵɵelementStart(0, \"mat-option\", 7);\r\n    i0.ɵɵtext(1);\r\n    i0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const name_r4 = ctx.$implicit;\r\n    i0.ɵɵproperty(\"value\", name_r4);\r\n    i0.ɵɵadvance(1);\r\n    i0.ɵɵtextInterpolate1(\" \", name_r4, \" \");\r\n} }\r\nfunction SelectmembreComponent_mat_optgroup_7_Template(rf, ctx) { if (rf & 1) {\r\n    i0.ɵɵelementStart(0, \"mat-optgroup\", 5);\r\n    i0.ɵɵtemplate(1, SelectmembreComponent_mat_optgroup_7_mat_option_1_Template, 2, 2, \"mat-option\", 6);\r\n    i0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const group_r2 = ctx.$implicit;\r\n    i0.ɵɵproperty(\"label\", group_r2.letter);\r\n    i0.ɵɵadvance(1);\r\n    i0.ɵɵproperty(\"ngForOf\", group_r2.names);\r\n} }\r\nexport const _filter = (opt, value) => {\r\n    const filterValue = value.toLowerCase();\r\n    return opt.filter(item => item.toLowerCase().includes(filterValue));\r\n};\r\n/**\r\n * @title Option groups autocomplete\r\n */\r\nexport class SelectmembreComponent {\r\n    constructor(_formBuilder) {\r\n        this._formBuilder = _formBuilder;\r\n        this.stateForm = this._formBuilder.group({\r\n            stateGroup: '',\r\n        });\r\n        this.stateGroups = [\r\n            {\r\n                letter: 'A',\r\n                names: ['Alabama', 'Alaska', 'Arizona', 'Arkansas'],\r\n            },\r\n            {\r\n                letter: 'C',\r\n                names: ['California', 'Colorado', 'Connecticut'],\r\n            },\r\n            {\r\n                letter: 'D',\r\n                names: ['Delaware'],\r\n            },\r\n            {\r\n                letter: 'F',\r\n                names: ['Florida'],\r\n            },\r\n            {\r\n                letter: 'G',\r\n                names: ['Georgia'],\r\n            },\r\n            {\r\n                letter: 'H',\r\n                names: ['Hawaii'],\r\n            },\r\n            {\r\n                letter: 'I',\r\n                names: ['Idaho', 'Illinois', 'Indiana', 'Iowa'],\r\n            },\r\n            {\r\n                letter: 'K',\r\n                names: ['Kansas', 'Kentucky'],\r\n            },\r\n            {\r\n                letter: 'L',\r\n                names: ['Louisiana'],\r\n            },\r\n            {\r\n                letter: 'M',\r\n                names: [\r\n                    'Maine',\r\n                    'Maryland',\r\n                    'Massachusetts',\r\n                    'Michigan',\r\n                    'Minnesota',\r\n                    'Mississippi',\r\n                    'Missouri',\r\n                    'Montana',\r\n                ],\r\n            },\r\n            {\r\n                letter: 'N',\r\n                names: [\r\n                    'Nebraska',\r\n                    'Nevada',\r\n                    'New Hampshire',\r\n                    'New Jersey',\r\n                    'New Mexico',\r\n                    'New York',\r\n                    'North Carolina',\r\n                    'North Dakota',\r\n                ],\r\n            },\r\n            {\r\n                letter: 'O',\r\n                names: ['Ohio', 'Oklahoma', 'Oregon'],\r\n            },\r\n            {\r\n                letter: 'P',\r\n                names: ['Pennsylvania'],\r\n            },\r\n            {\r\n                letter: 'R',\r\n                names: ['Rhode Island'],\r\n            },\r\n            {\r\n                letter: 'S',\r\n                names: ['South Carolina', 'South Dakota'],\r\n            },\r\n            {\r\n                letter: 'T',\r\n                names: ['Tennessee', 'Texas'],\r\n            },\r\n            {\r\n                letter: 'U',\r\n                names: ['Utah'],\r\n            },\r\n            {\r\n                letter: 'V',\r\n                names: ['Vermont', 'Virginia'],\r\n            },\r\n            {\r\n                letter: 'W',\r\n                names: ['Washington', 'West Virginia', 'Wisconsin', 'Wyoming'],\r\n            },\r\n        ];\r\n    }\r\n    ngOnInit() {\r\n        this.stateGroupOptions = this.stateForm.get('stateGroup').valueChanges.pipe(startWith(''), map(value => this._filterGroup(value)));\r\n    }\r\n    _filterGroup(value) {\r\n        if (value) {\r\n            return this.stateGroups\r\n                .map(group => ({ letter: group.letter, names: _filter(group.names, value) }))\r\n                .filter(group => group.names.length > 0);\r\n        }\r\n        return this.stateGroups;\r\n    }\r\n}\r\nSelectmembreComponent.ɵfac = function SelectmembreComponent_Factory(t) { return new (t || SelectmembreComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder)); };\r\nSelectmembreComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: SelectmembreComponent, selectors: [[\"app-selectmembre\"]], decls: 9, vars: 5, consts: [[3, \"formGroup\"], [\"appearance\", \"fill\"], [\"type\", \"text\", \"matInput\", \"\", \"formControlName\", \"stateGroup\", \"required\", \"\", 3, \"matAutocomplete\"], [\"autoGroup\", \"matAutocomplete\"], [3, \"label\", 4, \"ngFor\", \"ngForOf\"], [3, \"label\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"]], template: function SelectmembreComponent_Template(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵelementStart(0, \"form\", 0)(1, \"mat-form-field\", 1)(2, \"mat-label\");\r\n        i0.ɵɵtext(3, \"States Group\");\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelement(4, \"input\", 2);\r\n        i0.ɵɵelementStart(5, \"mat-autocomplete\", null, 3);\r\n        i0.ɵɵtemplate(7, SelectmembreComponent_mat_optgroup_7_Template, 2, 2, \"mat-optgroup\", 4);\r\n        i0.ɵɵpipe(8, \"async\");\r\n        i0.ɵɵelementEnd()()();\r\n    } if (rf & 2) {\r\n        const _r0 = i0.ɵɵreference(6);\r\n        i0.ɵɵproperty(\"formGroup\", ctx.stateForm);\r\n        i0.ɵɵadvance(4);\r\n        i0.ɵɵproperty(\"matAutocomplete\", _r0);\r\n        i0.ɵɵadvance(3);\r\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(8, 3, ctx.stateGroupOptions));\r\n    } }, directives: [i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i2.MatFormField, i2.MatLabel, i3.MatInput, i1.DefaultValueAccessor, i4.MatAutocompleteTrigger, i1.NgControlStatus, i1.FormControlName, i1.RequiredValidator, i4.MatAutocomplete, i5.NgForOf, i6.MatOptgroup, i6.MatOption], pipes: [i5.AsyncPipe], encapsulation: 2 });\r\n"]},"metadata":{},"sourceType":"module"}