{"ast":null,"code":"import { startWith, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"src/app/service/membres.service\";\nimport * as i4 from \"@angular/material/form-field\";\nimport * as i5 from \"@angular/material/input\";\nimport * as i6 from \"@angular/material/autocomplete\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@angular/material/core\";\n\nfunction SelectmembreComponent_mat_optgroup_7_mat_option_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 7);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const name_r4 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", name_r4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", name_r4, \" \");\n  }\n}\n\nfunction SelectmembreComponent_mat_optgroup_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-optgroup\", 5);\n    i0.ɵɵtemplate(1, SelectmembreComponent_mat_optgroup_7_mat_option_1_Template, 2, 2, \"mat-option\", 6);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const group_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"label\", group_r2.letter);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", group_r2.names);\n  }\n}\n\nexport const _filter = (opt, value) => {\n  const filterValue = value.toLowerCase();\n  return opt.filter(item => item.toLowerCase().includes(filterValue));\n};\n/**\r\n * @title Option groups autocomplete\r\n */\n\nexport class SelectmembreComponent {\n  constructor(_formBuilder, http, service) {\n    this._formBuilder = _formBuilder;\n    this.http = http;\n    this.service = service;\n    this.stateForm = this._formBuilder.group({\n      stateGroup: ''\n    });\n    this.stateGroups = [{\n      letter: 'A',\n      names: ['Alabama', 'Alaska', 'Arizona', 'Arkansas']\n    }, {\n      letter: 'C',\n      names: ['California', 'Colorado', 'Connecticut']\n    }, {\n      letter: 'D',\n      names: ['Delaware']\n    }, {\n      letter: 'F',\n      names: ['Florida']\n    }, {\n      letter: 'G',\n      names: ['Georgia']\n    }, {\n      letter: 'H',\n      names: ['Hawaii']\n    }, {\n      letter: 'I',\n      names: ['Idaho', 'Illinois', 'Indiana', 'Iowa']\n    }, {\n      letter: 'K',\n      names: ['Kansas', 'Kentucky']\n    }, {\n      letter: 'L',\n      names: ['Louisiana']\n    }, {\n      letter: 'M',\n      names: ['Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana']\n    }, {\n      letter: 'N',\n      names: ['Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'North Dakota']\n    }, {\n      letter: 'O',\n      names: ['Ohio', 'Oklahoma', 'Oregon']\n    }, {\n      letter: 'P',\n      names: ['Pennsylvania']\n    }, {\n      letter: 'R',\n      names: ['Rhode Island']\n    }, {\n      letter: 'S',\n      names: ['South Carolina', 'South Dakota']\n    }, {\n      letter: 'T',\n      names: ['Tennessee', 'Texas']\n    }, {\n      letter: 'U',\n      names: ['Utah']\n    }, {\n      letter: 'V',\n      names: ['Vermont', 'Virginia']\n    }, {\n      letter: 'W',\n      names: ['Washington', 'West Virginia', 'Wisconsin', 'Wyoming']\n    }];\n  }\n\n  ngOnInit() {\n    this.stateGroupOptions = this.stateForm.get('stateGroup').valueChanges.pipe(startWith(''), map(value => this._filterGroup(value)));\n    console.log(\"hey this is users \", this.service.getData().subscribe({\n      next: res => {\n        console.log(res);\n        this.users = res;\n        console.log(\"hey from et funtc\" + this.users);\n      },\n      error: err => {\n        console.log(\"errror while displaying \");\n      }\n    }));\n  }\n\n  _filterGroup(value) {\n    if (value) {\n      return this.stateGroups.map(group => ({\n        letter: group.letter,\n        names: _filter(group.names, value)\n      })).filter(group => group.names.length > 0);\n    }\n\n    return this.stateGroups;\n  }\n\n}\n\nSelectmembreComponent.ɵfac = function SelectmembreComponent_Factory(t) {\n  return new (t || SelectmembreComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.HttpClient), i0.ɵɵdirectiveInject(i3.MembresService));\n};\n\nSelectmembreComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: SelectmembreComponent,\n  selectors: [[\"app-selectmembre\"]],\n  decls: 9,\n  vars: 5,\n  consts: [[3, \"formGroup\"], [\"appearance\", \"fill\"], [\"type\", \"text\", \"matInput\", \"\", \"formControlName\", \"stateGroup\", \"required\", \"\", 3, \"matAutocomplete\"], [\"autoGroup\", \"matAutocomplete\"], [3, \"label\", 4, \"ngFor\", \"ngForOf\"], [3, \"label\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"]],\n  template: function SelectmembreComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0)(1, \"mat-form-field\", 1)(2, \"mat-label\");\n      i0.ɵɵtext(3, \"States Group\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"input\", 2);\n      i0.ɵɵelementStart(5, \"mat-autocomplete\", null, 3);\n      i0.ɵɵtemplate(7, SelectmembreComponent_mat_optgroup_7_Template, 2, 2, \"mat-optgroup\", 4);\n      i0.ɵɵpipe(8, \"async\");\n      i0.ɵɵelementEnd()()();\n    }\n\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(6);\n\n      i0.ɵɵproperty(\"formGroup\", ctx.stateForm);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"matAutocomplete\", _r0);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(8, 3, ctx.stateGroupOptions));\n    }\n  },\n  directives: [i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i4.MatFormField, i4.MatLabel, i5.MatInput, i1.DefaultValueAccessor, i6.MatAutocompleteTrigger, i1.NgControlStatus, i1.FormControlName, i1.RequiredValidator, i6.MatAutocomplete, i7.NgForOf, i8.MatOptgroup, i8.MatOption],\n  pipes: [i7.AsyncPipe],\n  encapsulation: 2\n});","map":{"version":3,"sources":["C:/Users/Akhalladi/Documents/TaskForce/Front-end/taskforceUI/src/app/components/selectmembre/selectmembre.component.ts"],"names":["startWith","map","i0","i1","i2","i3","i4","i5","i6","i7","i8","SelectmembreComponent_mat_optgroup_7_mat_option_1_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","name_r4","$implicit","ɵɵproperty","ɵɵadvance","ɵɵtextInterpolate1","SelectmembreComponent_mat_optgroup_7_Template","ɵɵtemplate","group_r2","letter","names","_filter","opt","value","filterValue","toLowerCase","filter","item","includes","SelectmembreComponent","constructor","_formBuilder","http","service","stateForm","group","stateGroup","stateGroups","ngOnInit","stateGroupOptions","get","valueChanges","pipe","_filterGroup","console","log","getData","subscribe","next","res","users","error","err","length","ɵfac","SelectmembreComponent_Factory","t","ɵɵdirectiveInject","FormBuilder","HttpClient","MembresService","ɵcmp","ɵɵdefineComponent","type","selectors","decls","vars","consts","template","SelectmembreComponent_Template","ɵɵelement","ɵɵpipe","_r0","ɵɵreference","ɵɵpipeBind1","directives","ɵNgNoValidate","NgControlStatusGroup","FormGroupDirective","MatFormField","MatLabel","MatInput","DefaultValueAccessor","MatAutocompleteTrigger","NgControlStatus","FormControlName","RequiredValidator","MatAutocomplete","NgForOf","MatOptgroup","MatOption","pipes","AsyncPipe","encapsulation"],"mappings":"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","sourcesContent":["import { startWith, map } from 'rxjs/operators';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/forms\";\r\nimport * as i2 from \"@angular/common/http\";\r\nimport * as i3 from \"src/app/service/membres.service\";\r\nimport * as i4 from \"@angular/material/form-field\";\r\nimport * as i5 from \"@angular/material/input\";\r\nimport * as i6 from \"@angular/material/autocomplete\";\r\nimport * as i7 from \"@angular/common\";\r\nimport * as i8 from \"@angular/material/core\";\r\nfunction SelectmembreComponent_mat_optgroup_7_mat_option_1_Template(rf, ctx) { if (rf & 1) {\r\n    i0.ɵɵelementStart(0, \"mat-option\", 7);\r\n    i0.ɵɵtext(1);\r\n    i0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const name_r4 = ctx.$implicit;\r\n    i0.ɵɵproperty(\"value\", name_r4);\r\n    i0.ɵɵadvance(1);\r\n    i0.ɵɵtextInterpolate1(\" \", name_r4, \" \");\r\n} }\r\nfunction SelectmembreComponent_mat_optgroup_7_Template(rf, ctx) { if (rf & 1) {\r\n    i0.ɵɵelementStart(0, \"mat-optgroup\", 5);\r\n    i0.ɵɵtemplate(1, SelectmembreComponent_mat_optgroup_7_mat_option_1_Template, 2, 2, \"mat-option\", 6);\r\n    i0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const group_r2 = ctx.$implicit;\r\n    i0.ɵɵproperty(\"label\", group_r2.letter);\r\n    i0.ɵɵadvance(1);\r\n    i0.ɵɵproperty(\"ngForOf\", group_r2.names);\r\n} }\r\nexport const _filter = (opt, value) => {\r\n    const filterValue = value.toLowerCase();\r\n    return opt.filter(item => item.toLowerCase().includes(filterValue));\r\n};\r\n/**\r\n * @title Option groups autocomplete\r\n */\r\nexport class SelectmembreComponent {\r\n    constructor(_formBuilder, http, service) {\r\n        this._formBuilder = _formBuilder;\r\n        this.http = http;\r\n        this.service = service;\r\n        this.stateForm = this._formBuilder.group({\r\n            stateGroup: '',\r\n        });\r\n        this.stateGroups = [\r\n            {\r\n                letter: 'A',\r\n                names: ['Alabama', 'Alaska', 'Arizona', 'Arkansas'],\r\n            },\r\n            {\r\n                letter: 'C',\r\n                names: ['California', 'Colorado', 'Connecticut'],\r\n            },\r\n            {\r\n                letter: 'D',\r\n                names: ['Delaware'],\r\n            },\r\n            {\r\n                letter: 'F',\r\n                names: ['Florida'],\r\n            },\r\n            {\r\n                letter: 'G',\r\n                names: ['Georgia'],\r\n            },\r\n            {\r\n                letter: 'H',\r\n                names: ['Hawaii'],\r\n            },\r\n            {\r\n                letter: 'I',\r\n                names: ['Idaho', 'Illinois', 'Indiana', 'Iowa'],\r\n            },\r\n            {\r\n                letter: 'K',\r\n                names: ['Kansas', 'Kentucky'],\r\n            },\r\n            {\r\n                letter: 'L',\r\n                names: ['Louisiana'],\r\n            },\r\n            {\r\n                letter: 'M',\r\n                names: [\r\n                    'Maine',\r\n                    'Maryland',\r\n                    'Massachusetts',\r\n                    'Michigan',\r\n                    'Minnesota',\r\n                    'Mississippi',\r\n                    'Missouri',\r\n                    'Montana',\r\n                ],\r\n            },\r\n            {\r\n                letter: 'N',\r\n                names: [\r\n                    'Nebraska',\r\n                    'Nevada',\r\n                    'New Hampshire',\r\n                    'New Jersey',\r\n                    'New Mexico',\r\n                    'New York',\r\n                    'North Carolina',\r\n                    'North Dakota',\r\n                ],\r\n            },\r\n            {\r\n                letter: 'O',\r\n                names: ['Ohio', 'Oklahoma', 'Oregon'],\r\n            },\r\n            {\r\n                letter: 'P',\r\n                names: ['Pennsylvania'],\r\n            },\r\n            {\r\n                letter: 'R',\r\n                names: ['Rhode Island'],\r\n            },\r\n            {\r\n                letter: 'S',\r\n                names: ['South Carolina', 'South Dakota'],\r\n            },\r\n            {\r\n                letter: 'T',\r\n                names: ['Tennessee', 'Texas'],\r\n            },\r\n            {\r\n                letter: 'U',\r\n                names: ['Utah'],\r\n            },\r\n            {\r\n                letter: 'V',\r\n                names: ['Vermont', 'Virginia'],\r\n            },\r\n            {\r\n                letter: 'W',\r\n                names: ['Washington', 'West Virginia', 'Wisconsin', 'Wyoming'],\r\n            },\r\n        ];\r\n    }\r\n    ngOnInit() {\r\n        this.stateGroupOptions = this.stateForm.get('stateGroup').valueChanges.pipe(startWith(''), map(value => this._filterGroup(value)));\r\n        console.log(\"hey this is users \", this.service.getData().subscribe({\r\n            next: (res) => {\r\n                console.log(res);\r\n                this.users = res;\r\n                console.log(\"hey from et funtc\" + this.users);\r\n            },\r\n            error: (err) => {\r\n                console.log(\"errror while displaying \");\r\n            }\r\n        }));\r\n    }\r\n    _filterGroup(value) {\r\n        if (value) {\r\n            return this.stateGroups\r\n                .map(group => ({ letter: group.letter, names: _filter(group.names, value) }))\r\n                .filter(group => group.names.length > 0);\r\n        }\r\n        return this.stateGroups;\r\n    }\r\n}\r\nSelectmembreComponent.ɵfac = function SelectmembreComponent_Factory(t) { return new (t || SelectmembreComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.HttpClient), i0.ɵɵdirectiveInject(i3.MembresService)); };\r\nSelectmembreComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: SelectmembreComponent, selectors: [[\"app-selectmembre\"]], decls: 9, vars: 5, consts: [[3, \"formGroup\"], [\"appearance\", \"fill\"], [\"type\", \"text\", \"matInput\", \"\", \"formControlName\", \"stateGroup\", \"required\", \"\", 3, \"matAutocomplete\"], [\"autoGroup\", \"matAutocomplete\"], [3, \"label\", 4, \"ngFor\", \"ngForOf\"], [3, \"label\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"]], template: function SelectmembreComponent_Template(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵelementStart(0, \"form\", 0)(1, \"mat-form-field\", 1)(2, \"mat-label\");\r\n        i0.ɵɵtext(3, \"States Group\");\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelement(4, \"input\", 2);\r\n        i0.ɵɵelementStart(5, \"mat-autocomplete\", null, 3);\r\n        i0.ɵɵtemplate(7, SelectmembreComponent_mat_optgroup_7_Template, 2, 2, \"mat-optgroup\", 4);\r\n        i0.ɵɵpipe(8, \"async\");\r\n        i0.ɵɵelementEnd()()();\r\n    } if (rf & 2) {\r\n        const _r0 = i0.ɵɵreference(6);\r\n        i0.ɵɵproperty(\"formGroup\", ctx.stateForm);\r\n        i0.ɵɵadvance(4);\r\n        i0.ɵɵproperty(\"matAutocomplete\", _r0);\r\n        i0.ɵɵadvance(3);\r\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(8, 3, ctx.stateGroupOptions));\r\n    } }, directives: [i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i4.MatFormField, i4.MatLabel, i5.MatInput, i1.DefaultValueAccessor, i6.MatAutocompleteTrigger, i1.NgControlStatus, i1.FormControlName, i1.RequiredValidator, i6.MatAutocomplete, i7.NgForOf, i8.MatOptgroup, i8.MatOption], pipes: [i7.AsyncPipe], encapsulation: 2 });\r\n"]},"metadata":{},"sourceType":"module"}